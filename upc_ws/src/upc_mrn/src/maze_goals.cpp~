#include <termios.h>
#include <stdio.h>
#include <iostream>
#include <ros/ros.h>
#include "sensor_msgs/LaserScan.h"
#include <visualization_msgs/Marker.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <tf/transform_datatypes.h>
#include <iostream>
#include <string>
#include <fstream>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;
sensor_msgs::LaserScan current_scan;
bool new_scan;
float myArray[140];
float x[70];
float y[70];
int k=0;
float yaw=0;
int robot_status;
float y_goal=0;

int moveRobot(float x, float y, float yaw);

void publishMarker(uint i, const float & x, const float & y,int color=0,int type=0,const float & yaw=0.0);

void scanCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
  current_scan = *msg;
  new_scan=true;
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "prueba");
  // init a node handler
  ros::NodeHandle n;
  ros::Rate loop_rate(1);

  // subscribe to laserscan topic
  ros::Subscriber sub = n.subscribe("scan", 1, scanCallback);
  ros::Publisher  pub = n.advertise<visualization_msgs::Marker>("candidate_marker", 3);
  
  // Reading the goals  
  using namespace std;
  ifstream file("/home/eduardorz/upc_ws/src/upc_mrn/goals_x_y.txt");
  if(file.is_open())
  {
    for(int i = 0; i < 140; ++i)
   {
        file >> myArray[i];
        if (i<70)
        {
            x[i]=myArray[i];
        }
        else
        {
            y[i-70]=myArray[i];
        }
    }
  }

  robot_status=1; // Just an initial value.
  while (ros::ok())
    {
    	if (robot_status==1||robot_status==2)
    	{
           
  
    	float x_goal = x[k+5]-x[k];
    	if((y[k+5]-y[k]-.4)>=0)
    	 y_goal = y[k+5]-y[k]-.4;
    	else
	 y_goal = y[k+5]-y[k];
    	publishMarker(444,1,x_goal,y_goal,0,0.0);
    	ROS_INFO("\n\n\n x= %f\n\n\n", x_goal);
    	ROS_INFO("\n\n\n y= %f\n\n\n", y_goal);    
    	moveRobot(x_goal,y_goal,yaw);  
    	 if (k<70)
    	    {
        		k=k+5;
        	}
    	}
    ros::spinOnce();
    loop_rate.sleep();
  	}
}

int moveRobot(float x, float y, float yaw)
{
  ROS_INFO("moveRobot(x=%4.2f,y=%4.2f,yaw=%4.2f)", x,y,yaw);
  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);


  std::string ss;
  ss="y";
  if(ss=="E")
  {
    ROS_INFO("Shutting down.");
    ros::shutdown(); //exit(0);
  }
  else if(ss=="y")
  {
    //wait for the action server to come up
    if(!ac.waitForServer(ros::Duration(5.0)))
    {
      ROS_ERROR("moveRobot: Move base server not connected");
      ros::shutdown();
      robot_status=0;
      return 0;
    }

    //we'll send a goal to the robot
    move_base_msgs::MoveBaseGoal goal;
    goal.target_pose.header.frame_id = "camera_depth_frame";
    goal.target_pose.header.stamp = ros::Time::now();
    goal.target_pose.pose.position.x = x+0.1; //offset from camera_depth_frame to base_footprint (tf transformation could be used instead)
    goal.target_pose.pose.position.y = y;
    goal.target_pose.pose.position.z = -0.28; //offset from camera_depth_frame to base_footprint (tf transformation could be used instead)

    //Conversion from roll,pitch,yaw to Quaternion, which is how orientations are represented
    tf::quaternionTFToMsg (tf::createQuaternionFromRPY(0.0,0.0,yaw),  goal.target_pose.pose.orientation);

    ROS_INFO("moveRobot: Sending Goal");
    ac.sendGoal(goal);

    int timeout=15;
    if(!ac.waitForResult(ros::Duration(timeout))) //wait timeout seconds
      ROS_WARN("moveRobot: timeout %dsec reached",timeout);
    
    //ROS_INFO("Current State: %s\n", ac.getState().toString().c_str());
    
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    {
      ROS_INFO("moveRobot: Hooray, the base reached the goal!");
      robot_status=1;
      return 1;
    }
    else
    {
      ROS_WARN("moveRobot: Oops, the base failed to reach the goal for some reason!");
      robot_status=2;
      return 2;
    }
  }
  else
  {
    ROS_INFO("moveRobot: Not sending goal.");
	robot_status=0;
    return 0;
  }
}

// publish a marker to rviz
void publishMarker(uint i, const float & x, const float & y,int color,int type,const float & yaw)
{
    ROS_INFO("publishMarker: publishing marker with id = %i, and pose: %f, %f, %f", i, x, y, yaw);
    ros::NodeHandle n;
    ros::Publisher  pub = n.advertise<visualization_msgs::Marker>("candidate_marker", 1);

    visualization_msgs::Marker marker;
    // Set the frame ID and timestamp.  See the TF tutorials for information on these.
    marker.header.frame_id = "camera_depth_frame";
    marker.header.stamp = ros::Time::now();

    // Set the namespace and id for this marker.  This serves to create a unique ID
    // Any marker sent with the same namespace and id will overwrite the old one
    marker.ns = "candidates";
    marker.id = i;

    // Set the marker type.
    // Set the scale of the marker
    switch(type)
    {
      default:
      case 0:
        marker.type = visualization_msgs::Marker::CYLINDER;
        marker.scale.x = marker.scale.y = 0.10; marker.scale.z = 0.56;
        marker.pose.position.z = 0.0;
        break;
      case 1:
        marker.type = visualization_msgs::Marker::ARROW;
        marker.scale.x = 0.5; marker.scale.y = marker.scale.z = 0.1;
        marker.pose.position.z = -0.28;
        break;
    }   

    // Set the marker action.  Options are ADD and DELETE
    marker.action = visualization_msgs::Marker::ADD;

    // Set the pose of the marker.  This is a full 6DOF pose relative to the frame/time specified in the header
    marker.pose.position.x = x;
    marker.pose.position.y = y;
    //marker.pose.position.z = -0.28; //depending on marker type, set above
    tf::quaternionTFToMsg (tf::createQuaternionFromRPY(0.0,0.0,yaw), marker.pose.orientation);

    // Set the lifetime of the marker
    marker.lifetime = ros::Duration(15);
    
    // Set the color -- be sure to set alpha to something non-zero!
    float r,g,b;
    color=color%7;
    switch(color)
    {
      default:
      case 0: r=0; g=0; b=1; break;
      case 1: r=0; g=1; b=0; break;
      case 2: r=1; g=0; b=0; break;
      case 3: r=1; g=0; b=1; break;
      case 4: r=0; g=1; b=1; break;
      case 5: r=1; g=1; b=0; break;
      case 6: r=0; g=0.5; b=1; break;
    }
    marker.color.r = r;
    marker.color.g = g;
    marker.color.b = b;
    marker.color.a = 1;

    // Publish the marker
    pub.publish(marker);
}
